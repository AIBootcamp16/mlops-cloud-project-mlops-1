name: CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_TAG: ${{ secrets.IMAGE_TAG || github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # GHCR push 권한
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # ----- 서비스별 이미지 푸시 (경로는 당신 레포 구조 기준) -----
      - name: Build & Push mlflow
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.mlflow
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}-mlflow:${{ env.IMAGE_TAG }}

      - name: Build & Push analysis
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.analysis
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}-analysis:${{ env.IMAGE_TAG }}

      - name: Build & Push airflow
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.airflow
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}-airflow:${{ env.IMAGE_TAG }}

      - name: Build & Push api
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.fastapi
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}-api:${{ env.IMAGE_TAG }}

      - name: Build & Push monitoring
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.monitoring
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}-monitoring:${{ env.IMAGE_TAG }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production   # Environments에서 승인(Required reviewers) 걸면 안전
    steps:
      - uses: actions/checkout@v4

      - name: Create .env from Secrets
        run: |
          cat > .env << 'EOF'
          MLFLOW_TRACKING_URI=http://mlflow:5000
          MLFLOW_BACKEND_STORE_URI=${{ secrets.MLFLOW_BACKEND_STORE_URI }}
          MLFLOW_DEFAULT_ARTIFACT_ROOT=${{ secrets.MLFLOW_DEFAULT_ARTIFACT_ROOT }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          PROJECT_PATH=/workspace
          PYTHONPATH=/workspace/src
          AIRFLOW__CORE__DAGS_FOLDER=/workspace/src/dags
          AIRFLOW__CORE__LOAD_EXAMPLES=False
          AIRFLOW__CORE__EXECUTOR=SequentialExecutor
          AIRFLOW_STORE_URI=${{ secrets.AIRFLOW_STORE_URI }}
          COVID_TARGET=new_cases
          COVID_TEST_DAYS=60
          COVID_HORIZON=30
          USE_OWID_DIRECT=true
          AUTO_PREDICT_WINDOW=30
          DATA_CUTOFF_DATE=
          MAX_FORECAST_DAYS=30
          TRAIN_START_DATE=
          TRAIN_END_DATE=
          PREDICT_START_DATE=
          EOF

      - name: Upload compose & env to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            infrastructure/docker/docker-compose-prod.yml
            .env
          target: ${{ secrets.REMOTE_APP_DIR }}

      - name: Compose pull & up on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.REMOTE_APP_DIR }}
            export IMAGE_TAG=${{ env.IMAGE_TAG }}
            docker compose -f infrastructure/docker/docker-compose-prod.yml pull
            docker compose -f infrastructure/docker/docker-compose-prod.yml up -d
            docker compose -f infrastructure/docker/docker-compose-prod.yml ps
