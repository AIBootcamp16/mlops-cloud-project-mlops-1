name: CI/CD

on:
  pull_request:
    branches: ["main"]             # PR에는 CI만 수행
  push:
    branches: ["main"]             # main push 시 CI -> Build&Push -> Deploy
  workflow_dispatch:               # 수동 실행 시에도 배포 가능

env:
  REGISTRY: ghcr.io

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # -------------------- CI (Lint + Test + Build Check) --------------------
  ci:
    name: CI - Lint & Test & BuildCheck
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('infrastructure/docker/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps (for CI)
        run: |
          python -m pip install --upgrade pip
          pip install -r infrastructure/docker/requirements.txt
          pip install pytest
          # pip install ruff

      # - name: Lint
      #   run: ruff check .

      - name: Run smoke tests
        run: pytest -q tests/test_smoke.py

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build check - mlflow
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.mlflow
          push: false

      - name: Build check - analysis
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.analysis
          push: false

      - name: Build check - airflow
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.airflow
          push: false

      - name: Build check - api
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.fastapi
          push: false

      - name: Build check - monitoring
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.monitoring
          push: false

  # -------------------- Build & Push (GHCR) --------------------
  build-and-push:
    name: Build & Push Images
    needs: ci
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.resolve_tag.outputs.image_tag }}
      owner_lc:  ${{ steps.norm.outputs.owner_lc }}
      repo_lc:   ${{ steps.norm.outputs.repo_lc }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # IMAGE_TAG: secrets.IMAGE_TAG 없으면 GITHUB_SHA 사용
      - id: resolve_tag
        name: Resolve IMAGE_TAG
        shell: bash
        run: |
          if [ -n "${{ secrets.IMAGE_TAG }}" ]; then
            TAG="${{ secrets.IMAGE_TAG }}"
          else
            TAG="${GITHUB_SHA}"
          fi
          echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          echo "image_tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Resolved IMAGE_TAG=${TAG}"

      - id: norm
        name: Normalize owner/repo to lowercase
        shell: bash
        run: |
          NS="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          OWNER_LC=$(echo "$NS"  | tr '[:upper:]' '[:lower:]')
          REPO_LC=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')
          echo "OWNER_LC=${OWNER_LC}" >> $GITHUB_ENV
          echo "REPO_LC=${REPO_LC}"   >> $GITHUB_ENV
          echo "owner_lc=${OWNER_LC}" >> $GITHUB_OUTPUT
          echo "repo_lc=${REPO_LC}"   >> $GITHUB_OUTPUT
          echo "Namespace: ${NS} -> ${OWNER_LC}"
          echo "Repo     : ${REPO} -> ${REPO_LC}"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push - mlflow
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.mlflow
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.REPO_LC }}-mlflow:${{ env.IMAGE_TAG }}

      - name: Build & Push - analysis
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.analysis
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.REPO_LC }}-analysis:${{ env.IMAGE_TAG }}

      - name: Build & Push - airflow
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.airflow
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.REPO_LC }}-airflow:${{ env.IMAGE_TAG }}

      - name: Build & Push - api
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.fastapi
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.REPO_LC }}-api:${{ env.IMAGE_TAG }}

      - name: Build & Push - monitoring
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infrastructure/docker/Dockerfile.monitoring
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.REPO_LC }}-monitoring:${{ env.IMAGE_TAG }}

  # -------------------- Deploy (Compose on remote) --------------------
  deploy:
    name: Deploy to Server
    needs: build-and-push
    # main으로의 push 또는 수동 실행 시 배포
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    env:
      IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
      OWNER_LC:  ${{ needs.build-and-push.outputs.owner_lc }}
      REPO_LC:   ${{ needs.build-and-push.outputs.repo_lc }}
      DEPLOY_SSH_PORT: ${{ secrets.SSH_PORT || 22 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print context (debug)
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "ref=${{ github.ref }}"
          echo "IMAGE_TAG=${IMAGE_TAG}"

      - name: Validate required secrets (existence only)
        shell: bash
        run: |
          check() { [ -n "$1" ] || { echo "❌ Missing secret: $2"; exit 1; }; }
          check "${{ secrets.SSH_HOST }}"        "SSH_HOST"
          check "${{ secrets.SSH_USER }}"        "SSH_USER"
          check "${{ secrets.SSH_KEY }}"         "SSH_KEY"
          check "${{ secrets.REMOTE_APP_DIR }}"  "REMOTE_APP_DIR"
          echo "✅ required secrets present"

      - name: Create .env from Secrets
        run: |
          cat > .env << 'EOF'
          MLFLOW_TRACKING_URI=http://mlflow:5000
          MLFLOW_BACKEND_STORE_URI=${{ secrets.MLFLOW_BACKEND_STORE_URI }}
          MLFLOW_DEFAULT_ARTIFACT_ROOT=${{ secrets.MLFLOW_DEFAULT_ARTIFACT_ROOT }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          PROJECT_PATH=/workspace
          PYTHONPATH=/workspace/src
          AIRFLOW__CORE__DAGS_FOLDER=/workspace/src/dags
          AIRFLOW__CORE__LOAD_EXAMPLES=False
          AIRFLOW__CORE__EXECUTOR=SequentialExecutor
          AIRFLOW_STORE_URI=${{ secrets.AIRFLOW_STORE_URI }}
          COVID_TARGET=new_cases
          COVID_TEST_DAYS=60
          COVID_HORIZON=30
          USE_OWID_DIRECT=true
          AUTO_PREDICT_WINDOW=30
          DATA_CUTOFF_DATE=
          MAX_FORECAST_DAYS=30
          TRAIN_START_DATE=
          TRAIN_END_DATE=
          PREDICT_START_DATE=
          EOF

      - name: Write SSH key to file
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Add host to known_hosts
        shell: bash
        run: |
          ssh-keyscan -p "${DEPLOY_SSH_PORT}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Upload compose & env to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.DEPLOY_SSH_PORT }}
          source: |
            infrastructure/docker/docker-compose-prod.yml
            .env
          target: ${{ secrets.REMOTE_APP_DIR }}

      - name: Compose pull & up on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.DEPLOY_SSH_PORT }}
          script: |
            set -e
            cd ${{ secrets.REMOTE_APP_DIR }}
            export IMAGE_TAG="${{ env.IMAGE_TAG }}"
            echo "Using IMAGE_TAG=${IMAGE_TAG}"
            docker compose -f infrastructure/docker/docker-compose-prod.yml pull
            docker compose -f infrastructure/docker/docker-compose-prod.yml up -d
            docker compose -f infrastructure/docker/docker-compose-prod.yml ps
